{"is_source_file": true, "format": "Python", "description": "This source file defines classes and functions for a weather Q&A backend service, integrating a simulated MCP weather client and possibly OpenAI's language models via LangChain. It includes logic for weather forecast simulation, heuristic parsing of user questions, and orchestrating responses using either deterministic data or AI-generated natural language.", "external_files": ["django.conf.settings", "langchain_openai", "langchain_core.messages"], "external_methods": ["langchain_openai.ChatOpenAI", "langchain_core.messages.HumanMessage", "langchain_core.messages.SystemMessage", "langchain_core.messages.AIMessage"], "published": ["extract_location_and_when", "WeatherQnAEngine"], "classes": [{"name": "MCPWeatherClient", "description": "A simulated weather forecast client that provides deterministic forecasts based on input location and date."}, {"name": "WeatherQnAEngine", "description": "Main orchestrator class that integrates the MCP weather client and optional OpenAI LLM to generate weather-related answers."}], "methods": [{"name": "Dict[str,str] get_forecast(self, location: str, when: str)", "description": "Returns a simulated weather forecast based on location and date input.", "scope": "MCPWeatherClient", "scopeKind": "class"}, {"name": "Tuple[str,str] extract_location_and_when(text: str)", "description": "Extracts location and time reference from user input text using heuristic pattern matching.", "scope": "", "scopeKind": ""}, {"name": "str answer(self, user_question: str)", "description": "Generates a weather-related answer, optionally using an LLM to craft a natural language response based on simulated forecast data.", "scope": "WeatherQnAEngine", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "WeatherQnAEngine", "scopeKind": "class", "description": "unavailable"}], "calls": ["self.mcp.get_forecast", "self.llm.invoke"], "search-terms": ["WeatherQnAEngine", "MCPWeatherClient", "simulate weather forecast", "heuristic extraction", "LangChain OpenAI integration"], "state": 2, "file_id": 20, "knowledge_revision": 42, "git_revision": "", "ctags": [{"_type": "tag", "name": "AIMessage", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    AIMessage = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ChatOpenAI", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    ChatOpenAI = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "HumanMessage", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    HumanMessage = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "MCPWeatherClient", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^class MCPWeatherClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SystemMessage", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    SystemMessage = None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "WeatherQnAEngine", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^class WeatherQnAEngine:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "WeatherQnAEngine", "scopeKind": "class"}, {"_type": "tag", "name": "answer", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    def answer(self, user_question: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, user_question: str)", "scope": "WeatherQnAEngine", "scopeKind": "class"}, {"_type": "tag", "name": "extract_location_and_when", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^def extract_location_and_when(text: str) -> Tuple[str, str]:$/", "language": "Python", "typeref": "typename:Tuple[str,str]", "kind": "function", "signature": "(text: str)"}, {"_type": "tag", "name": "get_forecast", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2775/qna_backend/api/services.py", "pattern": "/^    def get_forecast(self, location: str, when: str) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self, location: str, when: str)", "scope": "MCPWeatherClient", "scopeKind": "class"}], "hash": "87c501cd0ef7fb3a4c48534124c42160", "format-version": 4, "code-base-name": "qna_backend", "filename": "qna_backend/api/services.py", "fields": [{"name": "AIMessage = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ChatOpenAI = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "HumanMessage = None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SystemMessage = None", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"42": ""}]}